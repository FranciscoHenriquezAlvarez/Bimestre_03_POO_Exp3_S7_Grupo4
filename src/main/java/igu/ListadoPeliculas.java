package igu;

import javax.swing.table.DefaultTableModel;
import java.util.List;
import javax.swing.JOptionPane;
import logica.Cartelera;
import logica.controlador.CarteleraController;

/**
 *
 * @author raulzunigagonzalez
 */
public class ListadoPeliculas extends javax.swing.JFrame {

    private final CarteleraController controller;

    public ListadoPeliculas(CarteleraController controller) {
        this.controller = controller;
        initComponents();
        setLocationRelativeTo(null);
        cargarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaPeliculas = new javax.swing.JTable();
        btnEliminar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(120, 120, 121));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("LISTADO DE PELÍCULAS EN CARTELERA");

        tablaPeliculas.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        tablaPeliculas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tablaPeliculas);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 599, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
        );

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(227, 227, 227)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnEditar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(btnEliminar)
                        .addGap(40, 40, 40)
                        .addComponent(btnEditar)))
                .addContainerGap(50, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        /*Aquí llamo un evento que le digo, al abrir la ventana que me cargue
        la tabla de mi base de datos... debo crear el metodo crear tabla,
        de caso contrario me va a dar un error*/

        // cargarTabla();

    }//GEN-LAST:event_formWindowOpened

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed

        int row = tablaPeliculas.getSelectedRow();
        if (row >= 0) {
            int id = Integer.parseInt(String.valueOf(tablaPeliculas.getValueAt(row, 0)));
            int opt = JOptionPane.showConfirmDialog(
                this,
                "¿Eliminar la película ID " + id + "?",
                "Confirmar eliminación",
                JOptionPane.YES_NO_OPTION
            );
            if (opt == JOptionPane.YES_OPTION) {
                try {
                    controller.onEliminarPelicula(id);
                    JOptionPane.showMessageDialog(this, "Se eliminó correctamente.", "Eliminado", JOptionPane.INFORMATION_MESSAGE);
                    cargarTabla();
                } catch (Exception ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error al eliminar: " + ex.getMessage(),
                            "Eliminado", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione una película.", "Eliminar", JOptionPane.WARNING_MESSAGE);
        }
        
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        int row = tablaPeliculas.getSelectedRow();
        if (row >= 0) {
            int id = Integer.parseInt(String.valueOf(tablaPeliculas.getValueAt(row, 0)));
            EditarPelicula pantallaEditar = new EditarPelicula(controller, id); // paso el controller
            pantallaEditar.setVisible(true);
            pantallaEditar.setLocationRelativeTo(null);
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Por favor seleccione una película para editar",
                    "Selección Requerida", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnEditarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaPeliculas;
    // End of variables declaration//GEN-END:variables

    // ==== LÓGICA ====
    
    private void cargarTabla() {
        //Se debe definir el modelo que deseamos que tenga la tabla
        /*El DefaultTableModel me permite personalizar la tabla mediante código
        como yo deseo o estime que es mejor*/
        try {
            DefaultTableModel tabla = new DefaultTableModel() {
                /*Se agregó este parentesis ya que agregaremos un parametro más el cual
                evitará que alguna persona modifique las filas y las columnas de
                forma accidental*/

                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };

            /*Aquí estableceremos el nombre de las columnas*/
            String titulos[] = {"id", "Titulo de la Película", "Director", "Año", "Duración","Genero"};
            tabla.setColumnIdentifiers(titulos);//Con esto me olvido de preocuparme del ancho de las columnas

            /*Acá viene la carga de datos desde la base de datos*/
            List<Cartelera> listaPeliculas = controller.onListar();

            System.out.println("Número de películas encontradas: " + (listaPeliculas != null ? listaPeliculas.size() : "null"));

            /*Ahora va a recorrer la lista y va a traer todos los elementos de la tabla
        ... Ahora va a preguntar si nuestra lista es null o no, si no tiene nada cargado
        no nos va a hacer el proceso y nos va a dejar todo vacío*/
            if (listaPeliculas != null && !listaPeliculas.isEmpty()) {
                for (Cartelera cartelera : listaPeliculas) {
                    tabla.addRow(new Object[]{
                        cartelera.getId(),
                        cartelera.getTitulo(),
                        cartelera.getDirector(),
                        cartelera.getAnio(),
                        cartelera.getDuracion(),
                        cartelera.getGenero() != null ? cartelera.getGenero().toString() : "N/A"
                    });
                }
            } else {
                System.out.println("No se encontraron películas en la base de datos");
            }
            
            tablaPeliculas.setModel(tabla);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al cargar listado: " + e.getMessage(),
                    "Listado", JOptionPane.ERROR_MESSAGE);
        }
    }
}
